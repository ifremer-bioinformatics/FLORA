// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'
// Load report configuration
includeConfig 'conf/reports.config'

manifest {
    name = 'FLORA'
    author = 'CYRIL NOEL (IFREMER-IRSI-SeBiMER)'
    description = 'workFLOw for Rnaseq analyses of the Amocyst project'
    homePage = 'https://gitlab.ifremer.fr/cn7ab95/FLORA.git'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.10.0'
    version = 'beta'
}

// Define env variable that will be accessible in nextflow tasks
env {
    WDir = "${SCRATCH}"
}

// Workdir for temporary data
workDir = "$env.WDir/malaga_workdir/$params.projectName"

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
